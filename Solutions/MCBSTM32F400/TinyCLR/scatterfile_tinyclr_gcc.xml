<?xml version="1.0"?>
<ScatterFile xmlns="http://schemas.microsoft.com/netmf/ScatterfileSchema.xsd">

    <!-- STM32F4 with 1M Flash, 128k SRAM, and 64k DATA CCM -->

    <Set Name="Valid" Value="false"/>

    <!-- ################################################################################ -->
    <!-- Memory Region base and size values for physical hardware to help clarify the mapping
         by making Symbolic names available instead of a bunch of numbers. These values are
         fixed in hardware and therefore, don't change.
    -->
    <!-- Internal FLASH -->
    <Set Name="IFLASH_BaseAddress"      Value="0x08000000"/>
    <Set Name="IFLASH_Size"             Value="0x00100000"/><!-- 1MB -->

    <!-- Core Coupled Memory (CCM) [D-Bus] -->
    <Set Name="CCM_BaseAddress"         Value="0x10000000"/>
    <Set Name="CCM_Size"                Value="0x00010000"/><!-- 64KB -->

    <!-- Internal SRAM -->
    <Set Name="IRAM_BaseAddress"        Value="0x20000000"/>
    <Set Name="IRAM_Size"               Value="0x00020000"/><!-- 128KB -->

    <!-- External NOR Flash-->
    <Set Name="NOR_BaseAddress"         Value="0x60000000"/>
    <Set Name="NOR_Size"                Value="0x00800000"/><!-- 8MB -->

    <!-- External SRAM -->
    <Set Name="EXTRAM_BaseAddress"      Value="0x68000000"/>
    <Set Name="EXTRAM_Size"             Value="0x00200000"/><!-- 2MB -->

    <!-- Solution/Project specific usage settings -->
    <!-- Internal CCM (D-Bus) -->
    <!-- Put Stack in CCM for high speed access, reducing overhead of stack usage -->
    <Set Name="Stack_Bottom"            Value="%CCM_BaseAddress%"/>
    <Set Name="Stack_Size"              Value="%CCM_Size%" />

    <!-- External SRAM -->
    <Set Name="Heap_BaseAddress"        Value="%EXTRAM_BaseAddress%"/>

    <!-- External NOR FLASH -->
    <!-- Configuration section is at base of external NOR flash
         This needs to be in the same block storage device as the
         deployment region to enable the MFDeploy to access it.
         ( Due to device side library implementation limitation )
    -->
    <Set Name="Config_BaseAddress"      Value="%NOR_BaseAddress%"/>
    <Set Name="Config_Size"             Value="0x00010000"/><!-- 64KB -->

    <!-- DAT region goes into external NOR Flash -->
    <Set Name="Data_BaseAddress"        Value="%Config_BaseAddress% + %Config_Size%"/>
    <Set Name="Data_Size"               Value="0x00040000"/><!-- 256KB -->

    <!-- [Deployment fills the rest of external NOR flash...] -->

    <!-- Internal FLASH -->
    <!-- TinyBooter sits at power on Reset vector -->
    <Set Name="BooterCode_BaseAddress"  Value="%IFLASH_BaseAddress%"/>
    <Set Name="BooterCode_Size"         Value="0x00010000"/><!-- 64KB -->

    <If Name="TARGETLOCATION" Value="FLASH">
        <!-- Internal FLASH -->

        <!-- Native Code section -->
        <Set Name="Code_BaseAddress"    Value="%BooterCode_BaseAddress% + %BooterCode_Size%"/>
        <Set Name="Code_Size"           Value="%IFLASH_Size%-%BooterCode_Size%"/>

        <!-- =========================================================== -->
        <If Name="TARGETTYPE" Value="Release">
            <!-- ALL of external RAM is enabled for the CLR HEAP -->
            <Set Name="Heap_Size"       Value="%EXTRAM_Size%"/>
            <Set Name="CustomHeap_Size" Value="0"/>

            <Set Name="Valid"           Value="true"/>
        </If>
        <If Name="TARGETTYPE" Value="Debug">
            <!-- Use only 1MB of external RAM for Debug builds.
                 Can't use all of external RAM as the address pins overlap
                 with the SWD pins used for ETM tracing in Debug builds.
            -->
            <Set Name="Heap_Size"       Value="0x00100000"/><!--1MB-->
            <Set Name="CustomHeap_Size" Value="0"/>
            
            <Set Name="Valid"           Value="true"/>
        </If>
    </If>

    <!-- ################################################################################ -->
    <If Name="Valid" Value="false">
        <Error Message="Configuration not recognized"/>
    </If>

    <EntryPoint Name="EntryPoint" />
    
    <NamedGroup Name="MEMORY">
        <LoadRegion Name="D_CCM" Base="%CCM_BaseAddress%" Size="%CCM_Size%" />
        <LoadRegion Name="IRAM" Base="%IRAM_BaseAddress%" Size="%IRAM_Size%" />
        <LoadRegion Name="LR_%TARGETLOCATION%" Base="%Code_BaseAddress%" Size="%Code_Size%" />
        <LoadRegion Name="EXTRAM" Base="%EXTRAM_BaseAddress%" Size="%EXTRAM_Size%" />
        <LoadRegion Name="LR_CONFIG" Base="%Config_BaseAddress%" Size="%Config_Size%"/>
        <LoadRegion Name="LR_DAT" Base="%Data_BaseAddress%" Size="%Data_Size%"/>
    </NamedGroup>

    <NamedGroup Name="SECTIONS">
        <!-- ========= INTERNAL FLASH ============================================ -->
        <ExecRegion Name="ER_%TARGETLOCATION%" Options="&gt;LR_%TARGETLOCATION%">
            <FileMapping Name="*(i.EntryPoint)"/>
            <FileMapping Name="*(SectionForBootstrapOperations)"/>
            <FileMapping Name="KEEP(*(.init))"/>
            <FileMapping Name="KEEP(*(.fini))"/>
            <FileMapping Name="*crtbegin.o(.ctors)"/>
            <FileMapping Name="*(EXCLUDE_FILE(*crtend?.o *crtend.o) .ctors)"/>
            <FileMapping Name="*(SORT(.ctors.*))"/>
            <FileMapping Name="*(.ctors)"/>
            <FileMapping Name="*crtbegin.o(.dtors)"/>
            <FileMapping Name="*crtbegin?.o(.dtors)"/>
            <FileMapping Name="*(EXCLUDE_FILE(*crtend?.o *crtend.o) .dtors)"/>
            <FileMapping Name="*(SORT(.dtors.*))"/>
            <FileMapping Name="*(.dtors)"/>
            <FileMapping Name="*(.text*)"/>
            <FileMapping Name="*(i.*)"/>
            <FileMapping Name="*(.rodata*)"/>
            <FileMapping Name="*(rodata)"/>
            <FileMapping Name="*(.constdata*)"/>
            <FileMapping Name="*(.conststring*)"/>
            <FileMapping Name="*(.glue*)"/>
            <Include File="%SPOCLIENT%\Solutions\MCBSTM32F400\scatterfile_gcc_missing_symbols.xml"/>
        </ExecRegion>

        <!-- ========= INTERNAL RAM ============================================= -->
        <!-- Writeable Vector table -->
        <!-- NOTE:
             Despite what you might hope for, this CANNOT go into the CCM area as the NVIC does not
             have access to that space (it sees the AHB layer and below, rather than the core's D-Bus)
        -->
        <!-- Alignment for the vector table is important to allow the NVIC to decode the proper locations
            (See Section 4.4.4 of the ARM Cortex-M4 Generic User Guide [ ARM DUI 0553A (ID121610) ] )
            Since this starts the SRAM block, it's aligned just fine for any size table.
        -->
        <ExecRegion Name="ER_VECTORS" Options="&gt;IRAM">
            <FileMapping Name="*" Options="(VectorTable)" />
        </ExecRegion>

        <ExecRegion Name="ER_RAM_RW" Align="0x10" Options="&gt;IRAM AT&gt;LR_FLASH ">
            <FileMapping Name="*(rwdata)"/>
            <FileMapping Name="*(.data*)"/>
            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE(__preinit_array_start = . );"/>
            <FileMapping Name="KEEP(*(.preinit_array))"/>
            <FileMapping Name="PROVIDE(__preinit_array_end = . );"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE(__init_array_start = . );"/>
            <FileMapping Name="KEEP(*(SORT(.init_array)))"/>
            <FileMapping Name="KEEP(*(.init_array))"/>
            <FileMapping Name="PROVIDE(__init_array_end = . );"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="PROVIDE(__fini_array_start = . );"/>
            <FileMapping Name="KEEP(*(SORT(.fini_array)))"/>
            <FileMapping Name="KEEP(*(.fini_array))"/>
            <FileMapping Name="PROVIDE(__fini_array_end = . );"/>

            <FileMapping Name=". = ALIGN(4);"/>
            <FileMapping Name="__data_end__ = .;"/>
        </ExecRegion>

        <ExecRegion Name=".bss" Align="0x10" Base="(NOLOAD)" Options="&gt;IRAM">
            <FileMapping Name="*(.bss*)" />
            <FileMapping Name="*(.zidata*)" />
            <FileMapping Name="PROVIDE(__exidx_start = .);" />
            <FileMapping Name="PROVIDE(__exidx_end = .);" />
            <FileMapping Name="*(g_SSL_SeedData)" />
            <FileMapping Name="*(COMMON)" />
        </ExecRegion>

        <!-- To enable re-initialization of the LWIP stack, which has no built-in support
             for re-init, all RW and ZI data for the stack is placed into an isolated region
             and the HAL soft reboot code handles re-initializing the data in this region.
        -->
        <ExecRegion Name="ER_LWIP_OS_RW" Options="&gt;IRAM">
          <FileMapping Name="*sockets_hal_*_LWIP_os.lib(rwdata)" />
          <FileMapping Name="*lwip_1_4_1_os_CMSIS_RTOS.lib(rwdata)" />
        </ExecRegion>

        <ExecRegion Name="ER_LWIP_OS_ZI" Options="&gt;IRAM">
            <FileMapping Name="*sockets_hal_*_LWIP_os.lib(.bss)" />
            <FileMapping Name="*lwip_1_4_1_os_CMSIS_RTOS.lib(.bss)" />
        </ExecRegion>


        <ExecRegion Name="ER_RAM_RO" Align="0x10" Options="&gt;IRAM">
            <!-- Flash programming from Flash is safe on STM32 -->
            <!-- No need to place Flash programming code in RAM -->
            <!-- <FileMapping Name="*" Options="(SectionForFlashOperations)" /> -->
        </ExecRegion>


        <ExecRegion Name="/DISCARD/">
            <FileMapping Name="*(.ARM.exidx*)" />
            <FileMapping Name="*(.ARM.extab*)" />
        </ExecRegion>

        <!--========= EXTERNAL RAM =============================================--> 
        <ExecRegion Name="ER_HEAP_BEGIN" Options="&gt;EXTRAM">
            <FileMapping Name="*(SectionForHeapBegin)" />
        </ExecRegion>

        <!-- everything between heapbegin and heapend will be allocated for a heap -->

        <ExecRegion Name="ER_HEAP_END" Base="ADDR(ER_HEAP_BEGIN) + %Heap_Size%" Options="&gt;EXTRAM" >
            <FileMapping Name="*(SectionForHeapEnd)" />
        </ExecRegion>

        <ExecRegion Name="ER_CUSTOM_HEAP_BEGIN" Options="&gt;EXTRAM" >
            <FileMapping Name="*(SectionForCustomHeapBegin)" />
        </ExecRegion>

        <!-- everything between heapbegin and heapend will be allocated for the unmanaged SimpleHeap -->

        <ExecRegion Name="ER_CUSTOM_HEAP_END" Base="ADDR(ER_CUSTOM_HEAP_BEGIN) + %CustomHeap_Size%" Options="&gt;EXTRAM" >
            <FileMapping Name="*(SectionForCustomHeapEnd)" />
        </ExecRegion>

        <!-- ========= Internal CCM ============================================ -->
        <!-- Stack allocation pools for the OS, Sizes are set in RTX_Conf_CM.c along with other OS configuration -->
        <ExecRegion Name="ER_RT_STACK" Options="&gt;D_CCM">
            <FileMapping Name="*(rtx_stack)" />
        </ExecRegion>

        <!-- The rest of the CCM is used as a general stack during startup. This can't overlap with the ER_RT_STACK
             region as the kernel will zero that out during initialization, which would overwrite the stack of the
             code running the initialization, causing an early FAULT. Size and alignment are critical here. The stack
             must be aligned on an 8 byte boundary AND the size of this region must not extend it past the end of the
             actual physical CCM space. The CRT startup code will initialize the region and, if the aligned size
             puts the end outside of physical memory it will generate an imprecise abort.
        -->
        <ExecRegion Name="ER_STACK_BOTTOM" Align="8" Options="&gt;D_CCM">
            <FileMapping Name="*(SectionForStackBottom)" />
        </ExecRegion>

        <!-- (-8) for the two 32bit values in the SectionForStack* sections, This keeps the region
             limit from exceeding the size of physical memory. -->
        <ExecRegion Name="ER_STACK_TOP" Base="%Stack_Bottom% + %Stack_Size% - SIZEOF(ER_RT_STACK) - 8" Options="&gt;D_CCM">
            <FileMapping Name="*(SectionForStackTop)" />
        </ExecRegion>

        <ExecRegion Name="ER_DAT" Options="&gt;LR_DAT">
            <FileMapping Name="*(tinyclr_metadata)" />
        </ExecRegion>
        
        <ExecRegion Name="ER_CONFIG" Options="&gt;LR_CONFIG">
            <FileMapping Name="*(SectionForConfig)" />
        </ExecRegion>
    </NamedGroup>

    <!-- The following variables are used to simulate the ones autogenerated by ARMCC -->
    <GlobalVariable Name="Load$$ER_%TARGETLOCATION%$$Base"          Value="LOADADDR(ER_%TARGETLOCATION%)"/>
    <GlobalVariable Name="Image$$ER_%TARGETLOCATION%$$Length"       Value="SIZEOF(ER_%TARGETLOCATION%)"/>
    <GlobalVariable Name="Image$$ER_RAM_RO$$Base"                   Value="ADDR(ER_RAM_RO)"/>
    <GlobalVariable Name="Image$$ER_RAM_RO$$Length"                 Value="SIZEOF(ER_RAM_RO)"/>
    <GlobalVariable Name="Load$$ER_RAM_RO$$Base"                    Value="LOADADDR(ER_RAM_RO)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$Base"                   Value="ADDR(ER_RAM_RW)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$Length"                 Value="SIZEOF(ER_RAM_RW)"/>
    <GlobalVariable Name="Load$$ER_RAM_RW$$Base"                    Value="LOADADDR(ER_RAM_RW)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$ZI$$Base"               Value="ADDR(.bss)"/>
    <GlobalVariable Name="Image$$ER_RAM_RW$$ZI$$Length"             Value="SIZEOF(.bss)"/>
    <GlobalVariable Name="Load$$ER_LWIP_OS$$RW$$Base"               Value="LOADADDR(ER_LWIP_OS_RW)"/>
    <GlobalVariable Name="Image$$ER_LWIP_OS$$RW$$Base"              Value="ADDR(ER_LWIP_OS_RW)" />
    <GlobalVariable Name="Image$$ER_LWIP_OS$$RW$$Length"            Value="SIZEOF(ER_LWIP_OS_RW)"/>
    <GlobalVariable Name="Image$$ER_LWIP_OS$$ZI$$Base"              Value="ADDR(ER_LWIP_OS_ZI)" />
    <GlobalVariable Name="Image$$ER_LWIP_OS$$ZI$$Length"            Value="SIZEOF(ER_LWIP_OS_ZI)"/>
    <GlobalVariable Name="__use_no_semihosting_swi"                 Value="0"/>
</ScatterFile>

