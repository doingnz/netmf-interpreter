#include <cmsis_os_cpp.h>

// This is an attempt to get as close to the official std implementation as plausible
// with CMSIS-RTOS. It does not aim to be 100% complete, but it should be compatible
// with the official library for those parts it does implement. 
namespace std
{
    // REVIEW:
    // CMSIS_RTOS is silent on the recursive vs. non-recursive nature of mutex...
    // assuming recursive...
    class recursive_mutex
    {
    public:
        recursive_mutex( )
            : MutexId( 0 )
            , osMutexInitMember( MutexDef )
        {
            osMutexConstructMember( MutexDef );
            MutexId = osMutexCreate( osMutex( MutexDef ) );
        }

        void lock( )
        {
            osMutexWait( MutexId, osWaitForever );
        }

        bool try_lock( )
        {
            return ( osMutexWait( MutexId, 0 ) == osOK );
        }

        void unlock( )
        {
            osMutexRelease( MutexId );
        }

    private:
        // Explicitly disable copy constrution and copy assignment
        recursive_mutex( const recursive_mutex& );/* = delete;*/
        recursive_mutex& operator=( const recursive_mutex& );/* = delete;*/

        osMutexId MutexId;
        osMutexDefMember( MutexDef );
    };

    // template for RAII pattern lock/unlock of a mutex
    template<class _Mutex>
    class unique_lock
    {	
    public:
        typedef unique_lock<_Mutex> _Myt;
        typedef _Mutex mutex_type;

        unique_lock( ) 
            : _Pmtx( 0 )
            , _Owns( false )
        {
        }

        explicit unique_lock( _Mutex& _Mtx )
            : _Pmtx( &_Mtx )
            , _Owns( false )
        {	
            _Pmtx->lock( );
            _Owns = true;
        }

        // construct lock for a mutex already owned
        //unique_lock( _Mutex& _Mtx, adopt_lock_t )
        //    : _Pmtx( &_Mtx )
        //    , _Owns( true )
        //{	
        //}

        // construct the unique lock but don't take the lock
        //unique_lock( _Mutex& _Mtx, defer_lock_t )
        //    : _Pmtx( &_Mtx )
        //    , _Owns( false )
        //{	
        //}

        // construct the lock and try to take the lock
        // (might not succeed, so lock is not guaranteed
        // owned after construction)
        //unique_lock( _Mutex& _Mtx, try_to_lock_t )
        //    : _Pmtx( &_Mtx )
        //    , _Owns( _Pmtx->try_lock( ) )
        //{
        //}

        // construct and lock with timeout
        //template<class _Rep, class _Period>
        //unique_lock( _Mutex& _Mtx, const chrono::duration<_Rep, _Period>& _Rel_time )
        //    : _Pmtx( &_Mtx )
        //    , _Owns( _Pmtx->try_lock_for( _Rel_time ) )
        //{
        //  -=* UNSUPPORTED *=-
        //}

        // construct and lock with timeout
        //template<class _Clock, class _Duration>
        //unique_lock( _Mutex& _Mtx, const chrono::time_point<_Clock, _Duration>& _Abs_time )
        //    : _Pmtx( &_Mtx )
        //    , _Owns( _Pmtx->try_lock_until( _Abs_time ) )
        //{
        //  -=* UNSUPPORTED *=-
        //}

        // try to lock until _Abs_time
        //unique_lock( _Mutex& _Mtx, const xtime *_Abs_time )
        //    : _Pmtx( &_Mtx )
        //    , _Owns( false )
        //{
        //  -=* UNSUPPORTED *=-
        //}

        // move copyable
        //unique_lock( unique_lock&& _Other )
        //    : _Pmtx( _Other._Pmtx )
        //    , _Owns( _Other._Owns )
        //{	
        //    _Other._Pmtx = 0;
        //    _Other._Owns = false;
        //}

        // move assignable
        //unique_lock& operator=( unique_lock&& _Other )
        //{
        //    if( this != &_Other )
        //    {	// different, move contents
        //        if( _Owns )
        //            _Pmtx->unlock( );

        //        _Pmtx = _Other._Pmtx;
        //        _Owns = _Other._Owns;
        //        _Other._Pmtx = 0;
        //        _Other._Owns = false;
        //    }
        //    return ( *this );
        //}

        ~unique_lock( )
        {	
            if( _Owns )
                _Pmtx->unlock( );
        }

        void lock( )
        {
            _Pmtx->lock( );
            _Owns = true;
        }

        bool try_lock( )
        {
            _Owns = _Pmtx->try_lock( );
            return ( _Owns );
        }

        //template<class _Rep, class _Period>
        //bool try_lock_for( const chrono::duration<_Rep, _Period>& _Rel_time );
        //{
        //  -=* UNSUPPORTED *=-
        //}

        //template<class _Clock, class _Duration>
        //bool try_lock_until( const chrono::time_point<_Clock, _Duration>& _Abs_time )
        //{
        //  -=* UNSUPPORTED *=-
        //}

        //bool try_lock_until( const xtime *_Abs_time )
        //{	// try to lock the mutex until _Abs_time
        //    _Owns = _Pmtx->try_lock_until( _Abs_time );
        //    return ( _Owns );
        //}

        void unlock( )
        {	// unlock the mutex
            _Pmtx->unlock( );
            _Owns = false;
        }

        //void swap( unique_lock& _Other )
        //{	// swap with _Other
        //    _STD swap( _Pmtx, _Other._Pmtx );
        //    _STD swap( _Owns, _Other._Owns );
        //}

        _Mutex *release( )
        {	// disconnect
            _Mutex *_Res = _Pmtx;
            _Pmtx = 0;
            _Owns = false;
            return ( _Res );
        }

        // Test if this instance owns the lock
        bool owns_lock( ) const
        {	
            return ( _Owns );
        }

        // Test if this instance owns the lock
        /*explicit*/ operator bool( ) const
        {	
            return ( _Owns );
        }

        // Gets a pointer to the underlying mutex
        _Mutex *mutex( ) const
        {	
            return ( _Pmtx );
        }

    private:
        _Mutex *_Pmtx;
        bool _Owns;

        unique_lock( const unique_lock& )/* = delete*/;
        unique_lock& operator=( const unique_lock& )/* = delete*/;
    };
}
